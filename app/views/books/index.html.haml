%h1 Literate Minuteman
- if @user.library_systems.empty?
  .book
    = render :partial => 'users/choose_library_system'
- elsif @user.books.empty?
  .book
    %h2 Thanks for signing up!
    %p Our army of gruff-but-friendly robots is checking your to-read list against your library's records. Check back in a few minutes!
- else
  .book
    - at = @branch ? "available now at <b>#{@branch}</b>" : "available system-wide"
    %p Showing books from your to-read list #{at}. This list was last updated by the gruff-but-friendly robot army #{time_ago_in_words @user.updated_at} ago.
    .pagination
      = will_paginate @books
    -#%p
      -#Pick a branch to filter by:
      -#%select#locations
        -#- locations.each do |loc|
          -#- b = loc.gsub(/\s*\/\s*/,'-').downcase
          -#%option{:value => b.empty? ? "/" : "/branch/#{b}", :selected => (branch == b) }= loc
      -#%p 
        -#%a{:href => "/branches"} Change which branches to show by default
  - @books.each do |book|
    .book
      %h2= book[:title]
      -#- results = book[:results]
      -#- elsewhere = book[:elsewhere]
      -#%p.matches
        -#= succeed "." do 
          -#Found #{book.copies.length} possible matches #{branch.nil? ? "" : "at #{branch}"}
          -#- unless elsewhere.nil? || elsewhere.empty?
            -#and #{elsewhere.length}
            -#%a.elsewhere-toggle{:href=>"#"} elsewhere 
            -#in the system
      %ul.results
        = render :partial => "book", :locals => {:book => book}
        -#= haml :list, :locals => {:results => results, :branch => branch}
        -#- unless elsewhere.nil? || elsewhere.empty?
          -#%ul.elsewhere
            -#%h4 At Other Branches:
            -#= haml :list, :locals => {:results => elsewhere, :branch => nil}
  -#- unless only_elsewhere.empty?
    -#.book.no-results
      -#%h2 Found these books at other branches
      -#%ul 
        -#- only_elsewhere.each do |book|
          -#%li= book[:title]
  .book
    .pagination
      = will_paginate @books

  - unless @not_found.empty?
    .book.no-results
      %h2 Didn't Find These Books :-(
      %ul 
        - @not_found.each do |book|
          %li= book[:title]
