%h1 Literate Minuteman
.book
  - at = branch ? "available now at <b>#{branch}</b>" : "available system-wide"
  %p Showing books from your to-read list #{at}. This list was last updated by the gruff-but-friendly robot army #{time_ago_in_words(Time.parse(last_updated))} ago.
  %p
    Pick a branch to filter by:
    %select#locations
      - locations.each do |loc|
        - b = loc.gsub(/\s*\/\s*/,'-').downcase
        %option{:value => b.empty? ? "/" : "/branch/#{b}", :selected => (branch == b) }= loc
- books.each do |book|
  .book
    %h2= book[:title]
    - results = book[:results]
    - elsewhere = book[:elsewhere]
    %p.matches
      = succeed "." do 
        Found #{results.length} possible matches #{branch.nil? ? "" : "at #{branch}"}
        - unless elsewhere.nil? || elsewhere.empty?
          and #{elsewhere.length}
          %a.elsewhere-toggle{:href=>"#"} elsewhere 
          in the system
    %ul.results
      = haml :list, :locals => {:results => results, :branch => branch}
      - unless elsewhere.nil? || elsewhere.empty?
        %ul.elsewhere
          %h4 At Other Branches:
          = haml :list, :locals => {:results => elsewhere, :branch => nil}
- unless only_elsewhere.empty?
  .book.no-results
    %h2 Found these books at other branches
    %ul 
      - only_elsewhere.each do |book|
        %li= book[:title]
- unless no_results.empty?
  .book.no-results
    %h2 Didn't Find These Books :-(
    %ul 
      - no_results.each do |book|
        %li= book[:title]
